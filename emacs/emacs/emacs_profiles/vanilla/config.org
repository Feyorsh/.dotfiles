#+TITLE: Lit(erate) Config
#+AUTHOR: Shorden
#+PROPERTY: header-args:elisp :tangle "~/emacs/emacs_profiles/vanilla/init.el"

#+begin_quote
These are your father's parentheses. Elegant weapons for a more... civilized age. --- xkcd
#+end_quote
I use Mitsuharu's Mac port of Emacs 28.2, with the following build flags:
#+begin_src zsh
brew tap railwaycat/emacsmacport
brew install emacs-mac --with-native-compilation --with-librsvg --with-natural-title-bar --with-xwidgets
#+end_src
gccemacs is a no-brainer, librsvg is supposedly faster, natural title bar looks sexy when not in fullscreen, and XWidgets "pop up" (ba-dum tss) a few places in the config.
* Straight
Bootstrapping code. GNU Elpa is [[https://github.com/radian-software/straight.el/issues/305#issuecomment-417952067][broken]] or something?
#+begin_src elisp
;;; init.el --- Personal configuration file -*- lexical-binding: t; -*-

(setq straight-recipes-gnu-elpa-use-mirror t)
(setq straight-check-for-modifications '(check-on-save find-when-checking))
(setq straight-use-package-by-default t)
(setq straight-vc-git-default-clone-depth '(1 single-branch))
(setq use-package-verbose nil)

(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
	(url-retrieve-synchronously
"https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	 'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)
#+end_src
*** Early Init
:PROPERTIES:
:header-args:elisp: :tangle "~/emacs/emacs_profiles/vanilla/early-init.el"
:END:
#+begin_src elisp
;;; early-init.el --- Early Init File -*- lexical-binding: t; -*-

(setq package-enable-at-startup nil)
(add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory))
#+end_src

* Emacs
** Environment
:PROPERTIES:
:header-args:elisp: :tangle "~/emacs/emacs_profiles/vanilla/early-init.el"
:END:
This whole thing is a clusterfuck... I don't use [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] because even my shell is a clusterfuck. Instead we use this jank shit.
#+begin_src elisp
(setenv "LIBRARY_PATH" "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/lib")
(setenv "PATH" (concat (getenv "PATH") ":/opt/homebrew/bin:/Users/george/.cargo/bin"))
(setq exec-path (append exec-path '("/opt/homebrew/bin" "/Users/george/.cargo/bin")))
#+end_src
Ideally I can fix the libgccjit library issues by sticking these early enough in my config. Otherwise take the L and launch Emacs through the terminal like a doofus
#+begin_src elisp
(setenv "LSP_USE_PLISTS" "1")
#+end_src
Recommended config from lsp-mode
#+begin_src elisp
(setq native-comp-driver-options '("-Wl,-w"))
#+end_src
To tame gccemacs on macOS
** Backups
Forgot where I sourced all this, but basically take a rather conservative approach to backups without littering current directory with lock files.
#+begin_src elisp
(setq backup-directory-alist `(("." . "~/emacs/saves/backups")))
(setq auto-save-file-name-transforms `((".*" "~/emacs/saves/auto-saves/" t)))
(setq backup-by-copying-when-linked t
      version-control t
      kept-new-versions 5
      kept-old-versions 0
      delete-old-versions t
      vc-make-backup-files t)
#+end_src

** TODO Chemacs
Add the "real" chemacs config that lives in ~\tilde/.config/emacs~.
#+begin_src elisp
#+end_src
Scuffed profile switcher I made. Not gonna need it after I DELETE DOOM MWAHAHA
#+begin_src elisp
(defun switch-profile ()
  (interactive)
  (let* ((profiles_dir "~/emacs/emacs_profiles")
	 (chemacs "~/.config/chemacs/profile")
	 (emacs_app "/opt/homebrew/Cellar/emacs-mac/emacs-28.2-mac-9.1/Emacs.app")
	 (profiles (directory-files profiles_dir nil "^[^.].*"))
	 (choice (completing-read "Choose profile: " profiles))
	 (icon (file-name-concat profiles_dir (file-name-as-directory choice) (concat choice ".icns"))))
    (if (and (file-readable-p chemacs) (file-writable-p chemacs))
	(progn
	  (call-process-shell-command (concat "echo \"" choice "\" > " chemacs) nil t nil)
	  (if (executable-find "fileicon")
	      (progn
		(call-process-shell-command (concat "fileicon set " emacs_app " " icon) nil nil nil)
		(save-some-buffers)
		(kill-emacs))
	    (message (propertize "Error: fileicon not found" 'face '(:foreground "red")))))
      (message (propertize "Error: Can't write to chemacs `profile`" 'face '(:foreground "red"))))))
#+end_src

** Config
I was previously using file local variables at the end of ~config.org~, but they look /ugly AF/.
#+begin_src elisp
(defun config-reload ()
  (when (string= (file-name-nondirectory (buffer-file-name)) "config.org")
    (if (y-or-n-p "Reload?")(load-file (expand-file-name "init.el" user-emacs-directory)))))
(defun config-tangle ()
  (when (string= (file-name-nondirectory (buffer-file-name)) "config.org")
    (if (y-or-n-p "Tangle?")(org-babel-tangle))))

(add-hook 'after-save-hook 'config-reload)
(add-hook 'after-save-hook 'config-tangle)
#+end_src
I think this will work; gets rid of "File changed" dialog
#+begin_src elisp
(add-hook 'after-init-hook 'global-auto-revert-mode)
(setq debug-on-error t)
#+end_src
dOnT uSE tHe MoUSe!
#+begin_src elisp
(defun stop-using-minibuffer ()
  "kill the minibuffer"
  (when (and (>= (recursion-depth) 1) (active-minibuffer-window))
    (abort-recursive-edit)))

(add-hook 'mouse-leave-buffer-hook 'stop-using-minibuffer)
#+end_src
This should be fine, right?
#+begin_src elisp
(setq vc-follow-symlinks t)
#+end_src
Ok, ok, I'll switch to 29 soon, I promise...
#+begin_src elisp
(use-package compat
    :demand t)
#+end_src
Get native comp to shut up, but not so we can't debug a problem
#+begin_src elisp
(setq native-comp-async-report-warnings-errors 'silent)
#+end_src

** TODO Custom
:PROPERTIES:
:header-args:elisp: :tangle "~/emacs/emacs_profiles/vanilla/custom.el"
:END:
I will remove this... one day...
#+begin_src elisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ledger-reports
   '(("report1" "ledger [[ledger-mode-flags]] -f ~/Downloads/expenses.ledger reg Liabilities\\:Credit\\ Card\\:Personal -b 2023/02/09 -e 2023/03/09")
     ("monthly_expenses" "ledger -f ~/Downloads/expenses.ledger reg Expenses\\:Personal -b 2022/12/09 -e 2023/01/04 --real")
     ("bal" "%(binary) -f %(ledger-file) bal")
     ("reg" "%(binary) -f %(ledger-file) reg")
     ("payee" "%(binary) -f %(ledger-file) reg @%(payee)")
     ("account" "%(binary) -f %(ledger-file) reg %(account)"))))
#+end_src

#+begin_src elisp
;;(setq custom-file (concat user-emacs-directory "custom.el"))
;;(when (file-exists-p custom-file)
;;  (load custom-file))
#+end_src

* Packages
** Keybinds
After using vanilla Emacs for half a year, I finally switched to Evil. Sue me.
#+begin_src elisp
(use-package general
    :demand t
    :config
    (general-evil-setup))
#+end_src
#+begin_src elisp
(use-package evil
    :demand t
    :after general
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
	(setq evil-move-cursor-back nil)
	(setq evil-undo-system 'undo-redo)
	(setq evil-want-minibuffer t)
	;; disable state change echo
	;; consider actually unbinding the echo
    (setq evil-normal-state-message nil)
    (setq evil-insert-state-message nil)
    (setq evil-visual-state-message nil)
    (setq evil-replace-state-message nil)
    (setq evil-emacs-state-message nil)
    :config 
	(evil-ex-define-cmd "bkill" (lambda () (interactive) (kill-buffer (current-buffer))))
	(evil-ex-define-cmd "bk" "bkill")
	(evil-mode 1))
#+end_src
This has caused a huge pain in my backside because of how damn hard it is to override these keybindings, but this still provides more utility than not, so...
#+begin_src elisp
(use-package evil-collection
    :after evil
	:demand
	:config
	(setq evil-collection-setup-minibuffer t)
    (evil-collection-init))
#+end_src
I ran into a weird issue where the recipe on MELPA differed from the Git repo (straight doesn't use the MELPA version but instead the recipe). Running ~straight-pull-package~ fixed this issue.
Stole ~+org--insert-item~ from Doom.
#+begin_src elisp
(use-package evil-org
    :after org
    :hook (org-mode . evil-org-mode)
	:init
	(defun +org--insert-item (direction)
      (let ((context (org-element-lineage
                      (org-element-context)
                      '(table table-row headline inlinetask item plain-list)
                      t)))
		(pcase (org-element-type context)
          ;; Add a new list item (carrying over checkboxes if necessary)
          ((or `item `plain-list)
           ;; Position determines where org-insert-todo-heading and org-insert-item
           ;; insert the new list item.
           (if (eq direction 'above)
               (org-beginning-of-item)
			 (org-end-of-item)
			 (backward-char))
           (org-insert-item (org-element-property :checkbox context))
           ;; Handle edge case where current item is empty and bottom of list is
           ;; flush against a new heading.
           (when (and (eq direction 'below)
                      (eq (org-element-property :contents-begin context)
                          (org-element-property :contents-end context)))
			 (org-end-of-item)
			 (org-end-of-line)))

          ;; Add a new table row
          ((or `table `table-row)
           (pcase direction
			 ('below (save-excursion (org-table-insert-row t))
					 (org-table-next-row))
			 ('above (save-excursion (org-shiftmetadown))
					 (+org/table-previous-row))))

          ;; Otherwise, add a new heading, carrying over any todo state, if
          ;; necessary.
          (_
           (let ((level (or (org-current-level) 1)))
			 ;; I intentionally avoid `org-insert-heading' and the like because they
			 ;; impose unpredictable whitespace rules depending on the cursor
			 ;; position. It's simpler to express this command's responsibility at a
			 ;; lower level than work around all the quirks in org's API.
			 (pcase direction
               (`below
				(let (org-insert-heading-respect-content)
                  (goto-char (line-end-position))
                  (org-end-of-subtree)
                  (insert "\n" (make-string level ?*) " ")))
               (`above
				(org-back-to-heading)
				(insert (make-string level ?*) " ")
				(save-excursion (insert "\n"))))
			 (when-let* ((todo-keyword (org-element-property :todo-keyword context))
						 (todo-type    (org-element-property :todo-type context)))
               (org-todo
				(cond ((eq todo-type 'done)
                       ;; Doesn't make sense to create more "DONE" headings
                       (car (+org-get-todo-keywords-for todo-keyword)))
                      (todo-keyword)
                      ('todo)))))))

		(when (org-invisible-p)
          (org-show-hidden-entry))
		(when (and (bound-and-true-p evil-local-mode)
                   (not (evil-emacs-state-p)))
          (evil-insert 1))))

	(defun +org/insert-item-below (count)
      "Inserts a new heading, table cell or item below the current one."
      (interactive "p")
      (dotimes (_ count) (+org--insert-item 'below)))

	(defun +org/insert-item-above (count)
      "Inserts a new heading, table cell or item above the current one."
	  (interactive "p")
	  (dotimes (_ count) (+org--insert-item 'above)))
    :config
	(general-define-key
	 :keymaps 'org-mode-map
	 :state 'insert
	 "C-<return>"  #'+org/insert-item-below
	 "C-S-<return>"  #'+org/insert-item-above)

	(evil-org-set-key-theme '(textobjects insert navigation additional calendar))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src

** Performance
Oldest trick in the book! (Not really.)
#+begin_src elisp
(use-package gcmh
  :demand
  :config
  (setq gcmh-high-cons-threshold (* 16 1024 1024))
  :hook
  (after-init . gcmh-mode))
#+end_src
**** Early Init
:PROPERTIES:
:header-args:elisp: :tangle "~/emacs/emacs_profiles/vanilla/early-init.el"
:END:
This /should/ get reset by GCMH... right?
#+begin_src elisp
(setq gc-cons-threshold most-positive-fixnum)
#+end_src

** Completion
**** Corfu
#+begin_src elisp
(use-package corfu
    :straight (:files (:defaults "extensions/*")
					  :includes (
								 corfu-popupinfo
								 corfu-history
								 ))
    :hook ((after-init . global-corfu-mode)
		   (minibuffer-setup . corfu-enable-always-in-minibuffer)
		   (corfu-history-mode . savehist-mode))
    :config
	(with-eval-after-load 'doom-themes
	  (custom-set-faces `(corfu-current ((t (:background ,(doom-color 'base4)))))))
	(with-eval-after-load 'savehist
	  (add-to-list 'savehist-additional-variables 'corfu-history))
	(general-define-key
	 :states 'insert
	 :keymaps 'corfu-map
	 "C-u" #'corfu-scroll-down
	 "C-d" #'corfu-scroll-up
	 "M-k" #'corfu-popupinfo-scroll-down
	 "M-j" #'corfu-popupinfo-scroll-up
	 )
	(general-define-key
	 :states 'normal
	 :keymaps 'minibuffer-mode-map
	 "<escape>" #'abort-recursive-edit)

	(defun corfu-enable-always-in-minibuffer ()
	  "Enable Corfu in the minibuffer if Vertico is not active."
	  (unless (or (bound-and-true-p vertico--input)
				  (eq (current-local-map) read-passwd-map))
		(corfu-mode 1)))

	(setq corfu-auto t)
	(setq tab-always-indent 'complete)
	(setq completion-cycle-threshold nil)
	(setq corfu-min-width 20)
	(setq corfu-max-width 40)

	(corfu-history-mode)

	(corfu-popupinfo-mode)
	(setq corfu-popupinfo-delay 0.5)
	(setq corfu-popupinfo-max-width 40)
	(setq corfu-popupinfo-min-height 4)
    )
#+end_src

**** Vertico
#+begin_src elisp
(use-package vertico
    :straight (vertico :files (:defaults "extensions/*")
					   :includes (
								  vertico-directory
								  vertico-repeat
								  ;; vertico-indexed
								  ;; vertico-flat
								  ;; vertico-grid
								  ;; vertico-mouse
								  ;; vertico-quick
								  ;; vertico-buffer
								  ;; vertico-reverse
								  ;; vertico-multiform
								  ;; vertico-unobtrusive
								  ))
	:demand t
	:hook ((minibuffer-setup . vertico-repeat-save)
		   (rfn-eshadow-update-overlay . vertico-directory-tidy))

    :init
    (setq vertico-cycle nil)
    (setq read-file-name-completion-ignore-case t
		  read-buffer-completion-ignore-case t
		  completion-ignore-case t)
    (setq read-extended-command-predicate #'command-completion-default-include-p)
    :config
	(general-define-key
	 :keymaps 'vertico-map
	 :states 'insert
	 "C-j" #'vertico-next
	 "C-k" #'vertico-previous
	 "C-u" #'vertico-scroll-down
	 "C-d" #'vertico-scroll-up
	 "RET" #'vertico-directory-enter
	 "DEL" #'vertico-directory-delete-char
	 )
	(general-define-key
	 :keymaps 'vertico-map
	 :states 'normal
	 "C-j" #'vertico-next
	 "C-k" #'vertico-previous
	 "C-u" #'vertico-scroll-down
	 "C-d" #'vertico-scroll-up
	 "<escape>" #'abort-recursive-edit
	 )
    (vertico-mode))
#+end_src

**** Icons
#+begin_src elisp
(use-package all-the-icons)

(use-package all-the-icons-completion
    :after (marginalia all-the-icons)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
	:init
	(all-the-icons-completion-mode))

(use-package kind-icon
	:after corfu
	:custom
	(kind-icon-use-icons t)
	(kind-icon-default-face 'corfu-default)
	(kind-icon-blend-background nil)
	(kind-icon-blend-frac 0.08)
	(kind-icon-mapping
	 '((array          "a"   :icon "symbol-array"       :face font-lock-type-face              :collection "vscode")
	   (boolean        "b"   :icon "symbol-boolean"     :face font-lock-builtin-face           :collection "vscode")
       (color          "#"   :icon "symbol-color"       :face success                          :collection "vscode")
       (command        "cm"  :icon "chevron-right"      :face default                          :collection "vscode")
       (constant       "co"  :icon "symbol-constant"    :face font-lock-constant-face          :collection "vscode")
       (class          "c"   :icon "symbol-class"       :face font-lock-type-face              :collection "vscode")
       (constructor    "cn"  :icon "symbol-method"      :face font-lock-function-name-face     :collection "vscode")
       (enum           "e"   :icon "symbol-enum"        :face font-lock-builtin-face           :collection "vscode")
       (enummember     "em"  :icon "symbol-enum-member" :face font-lock-builtin-face           :collection "vscode")
       (enum-member    "em"  :icon "symbol-enum-member" :face font-lock-builtin-face           :collection "vscode")
       (event          "ev"  :icon "symbol-event"       :face font-lock-warning-face           :collection "vscode")
       (field          "fd"  :icon "symbol-field"       :face font-lock-variable-name-face     :collection "vscode")
       (file           "f"   :icon "symbol-file"        :face font-lock-string-face            :collection "vscode")
       (folder         "d"   :icon "folder"             :face font-lock-doc-face               :collection "vscode")
       (function       "f"   :icon "symbol-method"      :face font-lock-function-name-face     :collection "vscode")
       (interface      "if"  :icon "symbol-interface"   :face font-lock-type-face              :collection "vscode")
       (keyword        "kw"  :icon "symbol-keyword"     :face font-lock-keyword-face           :collection "vscode")
       (macro          "mc"  :icon "lambda"             :face font-lock-keyword-face)
       (magic          "ma"  :icon "lightbulb-autofix"  :face font-lock-builtin-face           :collection "vscode")
       (method         "m"   :icon "symbol-method"      :face font-lock-function-name-face     :collection "vscode")
       (module         "{"   :icon "file-code-outline"  :face font-lock-preprocessor-face)
       (numeric        "nu"  :icon "symbol-numeric"     :face font-lock-builtin-face           :collection "vscode")
       (operator       "op"  :icon "symbol-operator"    :face font-lock-comment-delimiter-face :collection "vscode")
       (param          "pa"  :icon "gear"               :face default                          :collection "vscode")
       (property       "pr"  :icon "symbol-property"    :face font-lock-variable-name-face     :collection "vscode")
       (reference      "rf"  :icon "library"            :face font-lock-variable-name-face     :collection "vscode")
       (snippet        "S"   :icon "symbol-snippet"     :face font-lock-string-face            :collection "vscode")
       (string         "s"   :icon "symbol-string"      :face font-lock-string-face            :collection "vscode")
       (struct         "%"   :icon "symbol-structure"   :face font-lock-variable-name-face     :collection "vscode")
       (text           "tx"  :icon "symbol-key"         :face font-lock-doc-face               :collection "vscode")
       (typeparameter  "tp"  :icon "symbol-parameter"   :face font-lock-type-face              :collection "vscode")
       (type-parameter "tp"  :icon "symbol-parameter"   :face font-lock-type-face              :collection "vscode")
       (unit           "u"   :icon "symbol-ruler"       :face font-lock-constant-face          :collection "vscode")
       (value          "v"   :icon "symbol-enum"        :face font-lock-builtin-face           :collection "vscode")
       (variable       "va"  :icon "symbol-variable"    :face font-lock-variable-name-face     :collection "vscode")
       (t              "."   :icon "question"           :face font-lock-warning-face           :collection "vscode")))
	:config
	(add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)
	)
#+end_src

**** TODO Other Stuff
At some point I need to lazy-load my entire config. Supposedly straight's ~defer:~ and eval-after-load could help with this.
Marginalia supposedly must be loaded at init.
#+begin_src elisp
(use-package prescient)

(use-package consult)

(use-package marginalia
    :init
    (marginalia-mode))

(use-package embark
    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    ;; Show the Embark target at point via Eldoc.  You may adjust the Eldoc
    ;; strategy, if you want to see the documentation from multiple providers.
    (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
				 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
				   nil
				   (window-parameters (mode-line-format . none)))))

(use-package embark-consult
    :ensure t
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** Apps
*** Sundry
**** TODO Crypto
EasyPG stuff:
#+begin_src elisp
(require 'epa-file)
(setq epa-pinentry-mode 'loopback)
#+end_src
Authentication config (I want to move this to be profile independent)
#+begin_src elisp
(setq auth-sources (mapcar (lambda (x) (concat user-emacs-directory x)) '(".authinfo.gpg" ".authinfo" ".netrc")))
#+end_src
Sensitive minor mode to disable backups and autosave
#+begin_src elisp
(define-minor-mode sensitive-minor-mode
    "For sensitive files like password lists.
It disables backup creation and auto saving.

With no argument, this command toggles the mode.
Non-null prefix argument turns on the mode.
Null prefix argument turns off the mode."
  ;; The initial value.
  :init-value nil
  ;; The indicator for the mode line.
  :lighter " sensitive"
  ;; The minor mode bindings.
  :keymap nil
  (if (symbol-value sensitive-minor-mode)
      (progn
	;; disable backups
	(set (make-local-variable 'backup-inhibited) t)	
	;; disable auto-save
	(if auto-save-default
	    (auto-save-mode -1)))
    ;; resort to default value of backup-inhibited
    (kill-local-variable 'backup-inhibited)
    ;; resort to default auto save setting
    (if auto-save-default
	(auto-save-mode 1))))

(setq auto-mode-alist
      (append '(("\\.gpg$" . sensitive-minor-mode)) auto-mode-alist))
#+end_src

*** TODO Mail
Right now I'm using Gnus, but I think I want to switch to something like mu4e. Or notmuch.
#+begin_src elisp
(setq gnus-home-directory (concat user-emacs-directory "gnus/"))
(setq gnus-directory gnus-home-directory)
(setq gnus-init-file (concat gnus-home-directory ".gnus.el"))
(setq gnus-startup-file (concat gnus-home-directory ".newsrc"))
#+end_src
I also need to absorb my Gnus config into here.
*** TODO IRC
Well, I see IRC hasn't gotten any easier to use.
#+begin_src elisp
(use-package erc
	:commands (erc erc-tls)
	:config
	(defvar erc-server-list
	  `(,`("Libera.Chat" :server "irc.libera.chat"
						 :port 6697
						 :client-certificate ,(expand-file-name "erc/libera.pem" user-emacs-directory))
		  ,`("OFTC" :server "irc.oftc.net"
					:port 6697
					:client-certificate ,(expand-file-name "erc/oftc.pem" user-emacs-directory))))

	(defun erc-join-server ()
	  (interactive)
	  (let* ((server (completing-read "Server: " (mapcar (lambda (s) (car s)) erc-server-list)))
			 (server-args (flatten-tree (mapcar (lambda (s) (cdr (member server s))) erc-server-list)))
			 (certs (plist-get server-args :client-certificate)))
		(if-let ((erc-buffer (get-buffer server)))
			(switch-to-buffer erc-buffer)
		  (progn
			(unless (and (eq (type-of certs) 'cons) (eq (length certs) '2))
			  (plist-put server-args :client-certificate (list certs certs)))
			(apply 'erc-tls server-args)))))

	(general-define-key
	 :keymaps 'erc-mode-map
	 "<up>" #'erc-previous-command
	 "<down>" #'erc-next-command)
	(define-advice erc-previous-command (:before-while () no-cycle)
	  (or (not erc-input-ring-index) (not (equal (ring-length erc-input-ring) (+ 1 erc-input-ring-index)))))
	(define-advice erc-next-command (:before-while () no-cycle)
	  erc-input-ring-index)

	(use-package erc-sasl
		:straight (:type built-in)
		:config
		(setq erc-sasl-mechanism 'external))
	(use-package erc-services
		:straight (:type built-in)
		:init
		;;(setq erc-prompt-for-nickserv-password nil)
		;;(setq erc-use-auth-source-for-nickserv-password nil)
		(erc-services-mode 1)
		)

	(setq erc-nick "Shorden")
	(setq erc-autojoin-timing 'ident)
	(setq erc-kill-buffer-on-part t)
	(setq erc-kill-queries-on-quit t)
	(setq erc-kill-server-buffer-on-quit t)
;;	(setq erc-auth-source-server-function nil)
	;(setq erc-prompt-for-password nil)
	(setq erc-autojoin-channels-alist '(("libera" "#emacs") ("oftc" "#llvm"))))
#+end_src
Instead of gnarsty password-based auth, we can use a certificate to authenticate. For some reason, OFTC has to use SHA-1 instead of SHA-256.
#+begin_src zsh :dir "~/emacs/emacs_profiles/vanilla" :eval no
mkdir -p erc
cd erc
openssl req -x509 -new -newkey rsa:4096 -sha256 -days 1825 -nodes -out libera.pem -keyout libera.pem
openssl req -x509 -new -newkey rsa:2048 -sha1 -days 1825 -nodes -out oftc.pem -keyout oftc.pem
#+end_src
And then once connected, run
#+begin_src erc :eval no
/msg NickServ CERT ADD
#+end_src
Unrelated: figure out a better place to stick this
#+begin_src elisp
(defun advice-unadvice (sym)
  "Remove all advices from symbol SYM."
  (interactive "aFunction symbol: ")
  (advice-mapc (lambda (advice _props) (advice-remove sym advice)) sym))
#+end_src

** Language
*** TODO Org
There's not a particular reason I don't use Emacs built-ins, but caution must be exercised to avoid clobbering the built-in and MELPA versions of Org.
#+begin_src elisp
(use-package org
    :init
  (setq org-directory "~/emacs/org")
  :config

  (setq org-src-preserve-indentation t
	    org-src-fontify-natively t
	    org-export-latex-listings t
	    org-export-with-smart-quotes t
	    org-latex-listings 'listings
	    org-latex-prefer-user-labels t
	    org-confirm-babel-evaluate nil
	    org-latex-pdf-process '("latexmk -bibtex -f -xelatex %f")
	    org-startup-folded t
	    org-cycle-include-plain-lists 'integrate
	    org-agenda-skip-scheduled-if-done t
	    org-use-sub-superscripts "{}"
	    ;; org-modern
	    org-auto-align-tags nil
	    org-tags-column 0
	    org-catch-invisible-edits 'show-and-error
	    org-special-ctrl-a/e t
	    org-insert-heading-respect-content t
	    org-hide-emphasis-markers t
	    org-pretty-entities t
	    org-ellipsis "…"
	    org-agenda-tags-column 0
	    org-agenda-block-separator ?─
	    org-agenda-time-grid
	    '((daily today require-timed)
		  (800 1000 1200 1400 1600 1800 2000)
		  " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
	    org-agenda-current-time-string
	    "⭠ now ─────────────────────────────────────────────────")
  (add-to-list 'org-latex-packages-alist '("" "listings"))

  :custom
  (org-agenda-files '("~/emacs/org/agenda.org")))
(add-hook 'emacs-startup-hook
	      (lambda ()
			(progn (find-file-noselect (expand-file-name "agenda.org" org-directory))
				   (find-file-noselect "~/.dotfiles/emacs/emacs/emacs_profiles/vanilla/config.org"))))
#+end_src
And now to make it *pretty*
#+begin_src elisp
(use-package org-modern
    :hook
  (org-mode . org-modern-mode)
  (org-agenda-finalize . org-modern-agenda)
  (org-modern-mode . fonts/org)
  (org-cdlatex-mode . fonts/literate-programming)
  :config
  (setq org-todo-keyword-faces '(("TODO" . org-todo)
				 ("WAIT" . "orange red")
				 ("DONE" . org-done)
				 ("PAST" . "dark red"))))
  (setq org-modern-todo-faces
	'(("WAIT" :background "orange red" :foreground "white")
		("PAST" :background "dark red" :foreground "white")))
  ;;:custom-face
  ;;(org-modern-block-name ((t (:weight light :height 0.9)))))

;; I confirmed that I can use text properties (not expensive) to do linenums with the fancy src blocks. Might look into this in the future.
;;(add-text-properties 1 2 '(display-line-numbers-disable t) nil)

;; tecosaur the goat for this one
(defvar +org-mode-left-margin-width 1
  "The `left-margin-width' to be used in `org-mode' buffers.")

(defun +setup-org-mode-left-margin ()
  (when (and (derived-mode-p 'org-mode)
             (eq (current-buffer) ; Check current buffer is active.
                 (window-buffer (frame-selected-window))))
    (setq left-margin-width (if display-line-numbers
                                0 +org-mode-left-margin-width))
    (set-window-buffer (get-buffer-window (current-buffer))
                       (current-buffer))))
(add-hook 'window-configuration-change-hook #'+setup-org-mode-left-margin)
(add-hook 'display-line-numbers-mode-hook #'+setup-org-mode-left-margin)
(add-hook 'org-mode-hook #'+setup-org-mode-left-margin)
#+end_src
Here's a hack for the annoying org fast todo popup:
#+begin_src elisp :tangle no
; Macro which creates advice 'template'
(defmacro my/with-advice (adlist &rest body)
  "Execute BODY with temporary advice in ADLIST.

Each element of ADLIST should be a list of the form
  (SYMBOL WHERE FUNCTION [PROPS])
suitable for passing to `advice-add'.  The BODY is wrapped in an
`unwind-protect' form, so the advice will be removed even in the
event of an error or nonlocal exit."
  (declare (debug ((&rest (&rest form)) body))
           (indent 1))
  `(progn
     ,@(mapcar (lambda (adform)
                 (cons 'advice-add adform))
               adlist)
     (unwind-protect (progn ,@body)
       ,@(mapcar (lambda (adform)
                   `(advice-remove ,(car adform) ,(nth 2 adform)))
                 adlist))))

;;Function which replaces org-switch-to-buffer-other-window with emacs' original switch-to-buffer-other-window
(defun hd/org-todo-same-window (orig-fn)
  "Advice to fix window placement in `org-fast-todo-selection'."
  (let  ((override
      '("\\*Org todo\\*|\\*Org Note\\*"
        (display-buffer-use-some-window)
        (inhibit-same-window . nil)))) ;locally sets variable "override" as key-value pair for display-buffer-alist entry
    (add-to-list 'display-buffer-alist override) ;adds the contents of the above defined variable to display-buffer-alist
    (my/with-advice
        ((#'org-switch-to-buffer-other-window :override #'switch-to-buffer-other-window))
      (unwind-protect (funcall orig-fn)
        (setq display-buffer-alist
              (delete override display-buffer-alist))))))

; Injecting the relevant advice into the org-fast-todo-selection function
(advice-add #'org-fast-todo-selection :around #'hd/org-todo-same-window)
#+end_src
Now for Babel:
#+begin_src elisp
(use-package org
	:config
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
	 (emacs-lisp . t)
	 (shell . t)
	 )))
#+end_src

*** Python
#+begin_src elisp
(use-package lsp-pyright
    :ensure t
    :hook (python-mode . (lambda ()
			   (require 'lsp-pyright)
			   (lsp-deferred))))
#+end_src

*** Zig
*** TODO Rust
Add DAP stuff + make sure rustic works
#+begin_src elisp
(use-package rustic
    :custom
  (rustic-analyzer-command '("rustup" "run" "stable" "rust-analyzer")))
#+end_src

*** TODO Lisp
Slime? Improve scratch?
#+begin_src elisp
(setq-default lisp-indent-function 'common-lisp-indent-function)
#+end_src

*** TODO C/C++
I realized I don't actually use an "official" style. Everyone else is just uglier than me.
Add label indentation + DAP stuff
#+begin_src elisp
(setq-default indent-tabs-mode t)
(setq-default tab-width 4)
(defvaralias 'c-basic-offset 'tab-width)
(defvaralias 'cperl-indent-level 'tab-width)
(setq-default c-default-style "k&r")
#+end_src

*** Markdown
#+begin_src elisp
(use-package markdown-mode
	:config
(with-eval-after-load 'doom-themes (custom-set-faces `(markdown-code-face ((t (:background ,(doom-color 'base1)))))))
)
#+end_src

** Tools
*** Terminal
Vterm works really well; I could always switch to eshell but I like fishy
#+begin_src elisp
(use-package vterm
    :config
  (setq vterm-shell "fish"))
#+end_src

*** TODO Dired
Switched to Dirvish, haven't looked back. Ty to Sun I for reccing ranger
Need to make an evil mode map for dirvish (add to evil-collection)
#+begin_src elisp
(use-package dirvish
    :custom
  (dirvish-quick-access-entries
   '(("h" "~/" "Home")
     ("d" "~/Downloads/" "Downloads")
     ("t" "~/.Trash" "TrashCan")))
  :init
  (dirvish-override-dired-mode)
  :config
  (setq delete-by-moving-to-trash t)
  (setq dirvish-preview-dispatchers
	(cl-substitute 'pdf-preface 'pdf dirvish-preview-dispatchers))
  (setq dirvish-attributes '(vc-state file-size git-msg subtree-state all-the-icons collapse file-time))
  (setq dired-listing-switches
	"-l --almost-all --human-readable --group-directories-first --no-group")
  ;;(setq dirvish-open-with-programs '(".mp4" . ()))
  (setq dirvish-mode-line-format '(:left (sort symlink) :right (vc-info yank index)))
  (setq dirvish-header-line-height '(25 . 35))
  (setq dirvish-side-width 38)
  (setq dirvish-header-line-format '(:left (path) :right (free-space)))
  (dirvish-peek-mode)
  )
#+end_src
Got to make sure all these goodies are installed:
#+begin_src bash
brew install coreutils fd poppler ffmpegthumbnailer mediainfo imagemagick
#+end_src
And here's stuff for vanilla Dired:
- freeBSD moment
- Also I am too dumb to be trusted with enabling /all/ of the disabled commands
#+begin_src elisp :tangle no
(setq insert-directory-program "gls")
(put 'dired-find-alternate-file 'disabled nil)
#+end_src

*** TODO Ledger
So I can commit tax fraud productively.
#+begin_src elisp
(use-package ledger-mode)
#+end_src

*** TODO Magit
#+begin_src elisp
(use-package magit)
#+end_src

*** TODO Debugger
Woah boy, this is gonna be a long one.
I started off trying to build lldb-vscode from source, only to immediately realize that's a /terrible/ idea. Instead, I admitted to myself that I'm still suckling the teat of VSCode and (ashamedly) installed Lanza's lldb-vscode.
#+begin_src elisp
(use-package dap-mode
    :config
  (setq dap-auto-configure-mode t)
  (setq dap-auto-configure-features '(sessions locals controls tooltip))
  (require 'dap-lldb)
  (setq dap-lldb-debug-program '("/opt/homebrew/opt/llvm/bin/lldb-vscode"))
  (setq dap-lldb-debugged-program-function (lambda () (read-file-name "Select file to debug.")))

  ;;; default debug template for (c++)
  (dap-register-debug-template
   "C++ LLDB dap"
   (list :type "lldb-vscode"
         :cwd nil
         :args nil
         :request "launch"
         :program nil))
  
  (defun dap-debug-create-or-edit-json-template ()
    "Edit the C++ debugging configuration or create + edit if none exists yet."
    (interactive)
    (let ((filename (concat (lsp-workspace-root) "/launch.json"))
	  (default "~/.emacs.d/default-launch.json"))
      (unless (file-exists-p filename)
	(copy-file default filename))
      (find-file-existing filename)))
)
#+end_src

*** TODO LSP
Add Orderless here at some point (see [[https://github.com/minad/corfu/wiki][Corfu wiki]] for setup)
#+begin_src elisp
(use-package lsp-mode
	:init
  (defun shor/lsp-mode-setup-completion ()
	(setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
		  '(flex)))
  :custom
  (lsp-completion-provider :none) ;; corfu
  :hook
  (lsp-completion-mode . shor/lsp-mode-setup-completion)
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  ;;  (setq lsp-keymap-prefix "C-c l")
  ;;:hook ((cc-mode . lsp-deferred)
  ;;	   (python-mode . lsp-deferred)
  ;;	   (zig-mode . lsp-deferred)
  ;;	   (rustic-mode . lsp-deferred))
  :commands (lsp lsp-deferred)
  :config
  (setq read-process-output-max (* 1024 1024)) ; 1mb

  (setq lsp-enable-symbol-highlighting nil)
  (setq lsp-headerline-breadcrumb-enable nil)
  (setq lsp-modeline-code-actions-enable nil)
  (setq lsp-modeline-diagnostics-enable nil))

;;(use-package lsp-ui
;;    :commands lsp-ui-mode
;;    :config
;;    (setq lsp-ui-doc-use-webkit t))
;;(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
;;(use-package lsp-treemacs
;;    :commands lsp-treemacs-errors-list
;;    :config
;;    (lsp-treemacs-sync-mode 1))
#+end_src

*** Treesitter
I FUCKING LOVE SYNTAX HIGHLIGHTING
I WANT TO FUCKING PARSE MY CODE'S AST AS FAST AS POSSIBLE
#+begin_src elisp
(use-package tree-sitter
    :config
  (global-tree-sitter-mode))
(use-package tree-sitter-langs)
#+end_src

*** Help
TODO move elsewhere (maybe an editor group?)
#+begin_src elisp
(use-package helpful
	:general (:keymaps 'global
					   "C-h f" #'helpful-callable
					   "C-h F" #'helpful-function
					   "C-h v" #'helpful-variable
					   "C-h k" #'helpful-key
					   "C-h x" #'helpful-command)
	:config
	(setq helpful-max-buffers 1))
#+end_src

** UI
*** Title Bar
#+begin_src elisp :tangle no
(setq-default frame-title-format "Emacs")
#+end_src
This is required to get the compilation flag ~--with-transparent-title-bar~ to behave properly.
#+begin_src bash
 defaults write org.gnu.Emacs HideDocumentIcon YES
#+end_src

*** TODO Theme
I make liberal use of Doom's themes but not ~evil-mode~. I still need to properly configure the modeline.
#+begin_src elisp
(use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t)
    (load-theme 'doom-palenight t)
    (doom-themes-visual-bell-config)
    (setq doom-themes-treemacs-theme "doom-atom")
    (doom-themes-treemacs-config)
    (doom-themes-org-config))

(use-package doom-modeline
    :ensure t
    :config
    (setq doom-modeline-modal-icon t)
    :hook
    (after-init . doom-modeline-mode))

(use-package solaire-mode
    :ensure t
    :config
    (solaire-global-mode +1))
#+end_src

*** TODO GUI
Or lack thereof...
#+begin_src elisp
(define-key global-map [menu-bar] nil)
(add-hook 'after-change-major-mode-hook (lambda () (local-set-key [menu-bar] nil)))
(add-hook 'minibuffer-setup-hook (lambda () (local-set-key [menu-bar] nil)))
#+end_src
~menu-bar-mode~ must be enabled for [[https://bitbucket.org/mituharu/emacs-mac/src/892fa7b2501a403b4f0aea8152df9d60d63f391a/doc/emacs/macport.texi?at=master#macport.texi-529][emacs-mac]], so we do this instead:
#+begin_src elisp
(define-key global-map [menu-bar] nil)
(add-hook 'after-change-major-mode-hook (lambda () (local-set-key [menu-bar] nil)))
(add-hook 'minibuffer-setup-hook (lambda () (local-set-key [menu-bar] nil)))
#+end_src
Add Centaur Tabs at some point. Or maybe not.

**** Early Init
:PROPERTIES:
:header-args:elisp: :tangle "~/emacs/emacs_profiles/vanilla/early-init.el"
:END:
#+begin_src elisp
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)

;; Resizing the Emacs frame can be a terribly expensive part of changing the
;; font. By inhibiting this, we easily halve startup times with fonts that are
;; larger than the system default.
(setq frame-inhibit-implied-resize t)

(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq use-file-dialog nil)
#+end_src

**** Treemacs
#+begin_src elisp
(use-package treemacs
	:after solaire-mode
	:config
	(push '(treemacs-window-background-face . solaire-default-face) solaire-mode-remap-alist)
	(push '(treemacs-hl-line-face . solaire-hl-line-face) solaire-mode-remap-alist)
	)
#+end_src

**** TODO Fonts
I still need to rice Org fonts, and test LaTeX fonts out. Defaults should be sane, though.
For ligatures
For visual-line-mode
#+begin_src elisp
(mac-auto-operator-composition-mode 1)

(add-hook 'text-mode-hook 'visual-line-mode)
(add-hook 'prog-mode-hook 'visual-line-mode)


(defun fonts/default ()
  (set-face-attribute 'default nil :font (font-spec :family "Jetbrains Mono" :size 13 :weight 'medium))
  (set-face-attribute 'fixed-pitch nil :font (font-spec :family "Jetbrains Mono" :size 13 :weight 'medium))
  (set-face-attribute 'variable-pitch nil :font (font-spec :family "Source Sans Pro" :size 15 :weight 'semi-bold))
  (set-fontset-font "fontset-default" 'unicode (font-spec :family "Arial" :size 15))
  (set-fontset-font "fontset-default" 'emoji (font-spec :family "Twitter Color Emoji" :size 20)))

(defun fonts/org ()
  (if org-modern-mode
  (progn
    (setq fonts/org-fixed-cookie (face-remap-add-relative 'fixed-pitch nil :font (font-spec :family "Jetbrains Mono" :size 13 :weight 'medium)))
    (setq fonts/org-variable-cookie (face-remap-add-relative 'variable-pitch nil :font (font-spec :family "Sarasa Mono J" :size 15 :weight 'normal)))
    (variable-pitch-mode +1))
  (progn
    (face-remap-remove-relative fonts/org-fixed-cookie)
    (face-remap-remove-relative fonts/org-variable-cookie)
    (variable-pitch-mode -1))))
;; note that I still need to set these in `custom` for org

(defun fonts/literate-programming ()
  (if org-cdlatex-mode
  (progn
    (setq fonts/literate-programming-fixed-cookie (face-remap-add-relative 'fixed-pitch nil :font (font-spec :family "Jetbrains Mono" :size 13 :weight 'medium)))
    (setq fonts/literate-programming-variable-cookie (face-remap-add-relative 'variable-pitch nil :font (font-spec :family "Latin Modern Roman" :size 15 :weight 'normal)))
    (variable-pitch-mode +1))
  (progn
    (face-remap-remove-relative fonts/literate-programming-fixed-cookie)
    (face-remap-remove-relative fonts/literate-programming-variable-cookie)
    (variable-pitch-mode -1))))

(add-hook 'after-init-hook 'fonts/default)
#+end_src
Ok, something in my Emacs config is definitely messing up native scroll.
#+begin_src elisp
(setq fast-but-imprecise-scrolling t)
#+end_src
We add rainbow-mode to color hex codes, like #003b6f.
#+begin_src elisp :tangle no
(use-package rainbow-mode
    :config
  (rainbow-mode 1))
#+end_src

**** TODO Splash Screen
I use this because of yabai weirdness. Also, I want to add a proper splash screen.
#+begin_src elisp :tangle no
(defun use-fancy-splash-screens-p () t)
#+end_src
Inspired by [[https://xenodium.com/emacs-a-welcoming-experiment/][Xenodium]].
#+begin_src elisp
(defun shor/show-welcome-buffer ()
  "Show *Dash* buffer."
  (with-current-buffer (get-buffer-create "*Dash*")
    (setq truncate-lines t)
    (let* ((buffer-read-only)
           (image-path "~/emacs/banner.svg")
           (image (create-image image-path))
           (size (image-size image))
           (height (cdr size))
           (width (car size))
           (top-margin (floor (/ (- (window-height) height) 2)))
           (left-margin (floor (/ (- (window-width) width) 2)))
           (prompt-title "Welcome to Emacs!"))
      (erase-buffer)
      (setq mode-line-format nil)
      (goto-char (point-min))
      (insert (make-string top-margin ?\n ))
      (insert (make-string left-margin ?\ ))
      (insert-image image)
      (insert "\n\n\n")
      (insert (make-string (floor (/ (- (window-width) (string-width prompt-title)) 2)) ?\ ))
      (insert prompt-title))
    (read-only-mode +1)
    (switch-to-buffer (current-buffer))))

(setq initial-scratch-message nil)
(setq inhibit-startup-screen t)

(add-hook 'emacs-startup-hook (lambda ()
								(when (display-graphic-p)
								  (shor/show-welcome-buffer))))
									#+end_src

** TODO Deprecated
To be replaced with EAF
#+begin_src elisp
(use-package pdf-tools
    :config 
  (pdf-tools-install)
  (setq pdf-view-use-scaling t)
  (setq-default pdf-view-display-size 'fit-page))
#+end_src
Emacs daemon doesn't work on macOS because... reasons. I have this shitty hack installed, but I never close Emacs anyway, so this is superfluous.
#+begin_src elisp
;; don't bother spinning up daemon; instead, emacs just doesn't close the last frame
;; consider using (server-start) so we can bind an Automator task to do some shizzle
;;(use-package mac-pseudo-daemon
;;    :config
;;  (mac-pseudo-daemon-mode 1))
#+end_src


